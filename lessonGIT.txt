http://github.com/github/gitignore - собраны все правила 
.gitignore для разных языков и задач.
HEAD^ где "^" указание на родителя 
HEAD^2 - указывает на второго родителя, актуально при merge commit
HEAD~2 - указывает на "дедушку" коммита, и т.д. цифра может быть любой. (аналогично можно так HEAD^^) 

echo 'текст' > FILE.TXT Можно прямо из командной строки направлять информацию в фаил, если нет такого фаила то он создает его.

add - Добавление в зону staged,
commit - создание коммита, -m сообение, -a коммитит изменения без добавления add. --amend перезапись последнего коммита.
branch - показывает список веткок.
status - статус.

grep - поиск по файлам
log - Показывает коммиты от HEAD~n n-колличаство родителей.
--graph Отображает графически ветвления.
--pretty Албтернативный формат: oneline, short, full, fuller, format("%h, %an, %ae" и т.д.)
--oneline Отображает по строчно используя команды: --pretty=oneline, --abbrev-commit
--abbrev-commit Отображает Сокрашенную хеш сумму SHA-1
--name-only Показывает список измененных файлов после информации о коммите
--name-status Показывает список файлов, который добавлены/удалены/изменены
--shortstat Отображает только строку с колличеством изменений/вставок/удалений для --stat
-(n) n-колличество коммитов, также можно огранничеть вывод по дате (--after, --before)
-S Поиск строки по коммитам
--all ^main  - ^ исключает коммиты ветки (main) из ветки (--all). Альтернативные варианты:
--all --not main
new_branch..main - ветку new_branch исключили

reflog - показывает все действия в коммитах. и скрытые коммиты.
show - просмотр коммита
checkout - перехот на другую ветку (или репозиторий).( -b создание ветки)
switch - переход на другую ветку.
fetch - Только получает историю из удаленного репозитория.
merge - сливает ветки. 
pull - работает fetch а за тем merge с локальной веткой.
push - сначало merge после отправляет изменения в удаленный репозиторий. Если происходят конфликты то их нужно разрешить.
rebase - перебазирование. тоесть перенос историю коммитов на другую ветку.
reset - откатывает по истории на нужный коммит, --soft без удаление истории,  --hard удаляет историю отката (можно посмотреть в REFLOG)
restore - сброс индекса.удаляет все изменения в файлах.
bisect - Бинарный поиск. Ищет ошибку в истории файлов.
diff - показывает изменения между индексом и последним коммитом. --cached между зоной staged и последним коммитом.
difftool - что бы использрвать графическую утилиту

stash - отдельная область stash, туда можно спрятать изненения из индексации гита.
stash apply | pop - вернуть из области stash (востановить). --index в индекс. А также drop
stash list - список изменений в области stash
stash clear - очистка области stash

clean - Удаляет неотслеживаемые файлы из рабочего дерева. Если для переменной конфигурации Git clean.requireForce задано значение true, добавьте -f, --force.
-n, --dry-run - Ничего не удаляет только показывает что будет удалено.
-d Удаляет директории.
-q, --quit Тихий режим.
-x  Удаляет даже то что в .gitignore
-i, --interactive  Интерактивный режим.

!не обязательно можно сработать add:
rm - удаление файла в индекс. Для сохранение в коммит.
mv - перемещение файла. Сохранение в коммит.

filter-branch Изменение во всей ветки проэкта с помощью нее можно удалить фаил во всех коммитах проекта.
>git filter-branch --tree-filter 'rm -f passwords.txt' HEAD удаляет файл в каждом коммите.
>git filter-branch --subdirectory-filter trunk HEAD Извеняет корневую папку "trunk"
так же можно изменить global данные например email делается это через скрипт, требует изучения.

revert создает новый коммит изменяя обратно старый 
>git revert -m 1 HEAD последний
! так можно отменить merge commit. Далее после изменения что бы обратно смержить ветки необходимо сделать еще раз revert этого же коммита так мы не потеряем историю коммитов рабочей ветки.

commit-tree -создает новый коммит с одинаковым деревом (тоесть коппирует дерево с другого коммита)
>echo "Описание коммита" | git commit-tree hash^{tree} 

replayce - соединяет ветки, заменяя один коммит другим С ОДИНАКОВЫМИ ДЕРЕВЬЯМИ.

Создавали ключ верефикации с помощью ключа  GNUPG 
